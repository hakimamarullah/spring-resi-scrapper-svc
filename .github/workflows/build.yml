# This workflow will build a Java project with Maven, build Docker image, and deploy to VPS
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

name: Build and Deploy to VPS

on:
  push:
    tags: [ "v*" ]  # Trigger on tags

jobs:
  build_and_push:
    name: Build and Push Docker image
    # Only build on tag pushes
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-name: ${{ vars.DOCKER_IMAGE_NAME }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up JDK (if needed for build context)
        uses: actions/setup-java@v4
        with:
          java-version: '21'  # Adjust to your Java version
          distribution: 'temurin'

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKER_IMAGE_NAME }}
          tags: |
            # Use tag name for tagged releases
            type=ref,event=tag
            # Use 'latest' for tagged releases
            type=raw,value=latest

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Image digest
        run: echo ${{ steps.build.outputs.digest }}

  deploy:
    name: Deploy to VPS
    environment: production
    runs-on: ubuntu-latest
    needs: build_and_push  # Wait for build job to complete
    if: success()  # Only run if build was successful
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set deployment info
        id: deploy-info
        run: |
          # Extract tag name from GitHub ref
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "IMAGE_NAME=${{ needs.build_and_push.outputs.image-name }}" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG_LATEST=${{ needs.build_and_push.outputs.image-name }}:latest" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG_VERSION=${{ needs.build_and_push.outputs.image-name }}:$TAG_NAME" >> $GITHUB_OUTPUT
          echo "SERVICE_NAME=${{ vars.SERVICE_NAME }}" >> $GITHUB_OUTPUT
          
          echo "Deployment info:"
          echo "Tag: $TAG_NAME"
          echo "Image: ${{ needs.build_and_push.outputs.image-name }}"
          echo "Latest tag: ${{ needs.build_and_push.outputs.image-name }}:latest"
          echo "Version tag: ${{ needs.build_and_push.outputs.image-name }}:$TAG_NAME"
          echo "Service: ${{ vars.SERVICE_NAME }}"

      - name: Copy deployment script to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT || 22 }}
          source: "scripts/deploy.sh"
          target: "/tmp/"

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        env:
          IMAGE_NAME: ${{ steps.deploy-info.outputs.IMAGE_NAME }}
          SERVICE_NAME: ${{ steps.deploy-info.outputs.SERVICE_NAME }}
          IMAGE_TAG_LATEST: ${{ steps.deploy-info.outputs.IMAGE_TAG_LATEST }}
          IMAGE_TAG_VERSION: ${{ steps.deploy-info.outputs.IMAGE_TAG_VERSION }}
          TAG_NAME: ${{ steps.deploy-info.outputs.TAG_NAME }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT || 22 }}
          envs: IMAGE_NAME,SERVICE_NAME,IMAGE_TAG_LATEST,IMAGE_TAG_VERSION,TAG_NAME
          script: |
            # Make script executable
            chmod +x /tmp/scripts/deploy.sh
            
            echo "Deployment started..."
            echo "Tag: $TAG_NAME"
            echo "Image Name: $IMAGE_NAME"
            echo "Latest Image: $IMAGE_TAG_LATEST"
            echo "Version Image: $IMAGE_TAG_VERSION"
            echo "Service: $SERVICE_NAME"
            
            # Pull the latest image to ensure we have it
            echo "Pulling Docker image..."
            docker pull $IMAGE_TAG_LATEST
            
            # Run deployment script with the latest tag
            echo "Running deployment script..."
            /tmp/scripts/deploy.sh "$IMAGE_TAG_LATEST" "$SERVICE_NAME"
            
            echo "Deployment completed!"